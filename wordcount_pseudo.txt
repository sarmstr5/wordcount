4) compute max and min a word appears in all addresses

for each address in addresses
  for each line in address
    for each word in line
      emit(<word, 1>)
// how do i loop through map phase?  I dont think i can this has to handled some other way i think
  for each key
    key_list[word] ++
  for each key in key_list
      if master_list[key] < key_list[key]
        master_list[key] == key_list[key]

5) Compute avg and std of words in 4 year windows from 1985

start_year = 1985
year = start_year
while year < 2018
  term_year = 0
  term_avg_wcs = empty list
  term_std_wcs = empty list 

  // pull file locations from local directory then merge to hdfs
  while term_year < 4
    address = get_file_location(year)
    addresses.append(address)
    term_year++
  year += term_year

  // merge local address files into one hdfs file to reduce network costs
  hdfs_addresses = merge_dfs(addresses)

  //map
  // not sure if we need to do each address, can skip that loop
  for each address in hdfs_addresses
    for each line in address
      for each word in line
        emit(<word, 1>)

  //reduce
  let reduce(mapped_keys)=
    for each k_v_pairs in mapped_keys
      sum = 0
      count = 0
      key , values = split(k_v_pair)
      for each value in values
        sum += value
        count++
      emit(key, sum, count)
  
  filename = year
  open file as filename
  for each key
    write(key, sum, count)
  close file

year = start_year + 5

while year < 2018

    sums, counts = WordCount(addresses[year])
    avgs, stds = calc_avgs(sums, counts)
    term_avg_wcs.append(term_avg)
    term_std_wcs.append(std_avg)


6) In post window years, find words whose use was greater than 2 stds (e.g. 89)
